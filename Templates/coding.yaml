AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template is the 'coding' microservice. It will work as follows:
  - a single lambda funciton will take the input from the server side javascript code, run the code then return the code to the frontend

Resources:
  CodingRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "coding-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CodingPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "Logging"  
                Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Sid: "CreateLogStream"  
                Effect: "Allow"
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"   

  

  FizzBuzzFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt CodingRole.Arn
      Runtime: "python3.12"
      FunctionName: FizzBuzzFunction
      Code:
        ZipFile: |
          import json
          import logging
          from io import StringIO
          import sys

          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              # Log the entire event to inspect its structure
              logger.info(f"Received event: {event}")

              # Direct Lambda Function URLs pass the payload in the 'body' field when the function is invoked.
              # The 'body' field is a JSON string, so it needs to be parsed.
              try:
                  if 'body' in event and isinstance(event['body'], str):
                      event_body = json.loads(event['body'])
                      user_code = event_body.get('code', '')
                  else:
                      # Fallback for any other structure (useful for testing locally)
                      user_code = event.get('code', '')
              except json.JSONDecodeError:
                  logger.error("Error decoding JSON from event body")
                  return {
                      'statusCode': 400,
                      'body': json.dumps({'error': 'Bad request'})
                  }

              # Basic input sanitization
              safe_code = sanitize_code(user_code)

              # Execute the sanitized user code and capture output
              execution_output, error_output = execute_user_code(safe_code)

              # Log the execution details
              logger.info(f"Executed code: {safe_code}")
              logger.info(f"Execution output: {execution_output}")
              if error_output:
                  logger.error(f"Execution error: {error_output}")

              # Prepare the response
              response = {
                  'statusCode': 200,
                  'body': json.dumps({
                      'output': execution_output if execution_output else error_output
                  })
              }

              return response

          def sanitize_code(code):
              # Basic sanitization to remove potentially harmful code
              banned_keywords = ['import', 'exec', 'eval', '__', 'open', 'subprocess', 'input', 'os', 'sys']
              for keyword in banned_keywords:
                  code = code.replace(keyword, '')
              return code

          def execute_user_code(code):
              # Redirect stdout
              original_stdout = sys.stdout
              sys.stdout = StringIO()

              execution_output, error_output = '', ''

              try:
                  # Execute the sanitized user code
                  exec(code)
                  # Capture the execution output
                  execution_output = sys.stdout.getvalue()
              except Exception as e:
                  # Capture any execution errors
                  error_output = str(e)
              finally:
                  # Restore original stdout
                  sys.stdout = original_stdout

              return execution_output, error_output
      MemorySize: 128
      Timeout: 183
      TracingConfig:
        Mode: "PassThrough"
      EphemeralStorage:
        Size: 512

  FizzBuzzURL:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: "NONE" # Required
      Cors:
        AllowCredentials: false
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        AllowOrigins:
          - "*"
        ExposeHeaders:
          - "*"
      InvokeMode: "BUFFERED"
      TargetFunctionArn: !GetAtt FizzBuzzFunction.Arn


  PrimeNumbersFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt CodingRole.Arn
      Runtime: "python3.12"
      FunctionName: PrimeNumbersFunction
      Code:
        ZipFile: |
          import logging
          from io import StringIO
          import sys

          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              # Log the entire event to inspect its structure
              logger.info(f"Received event: {event}")

              # Parse the event body to extract user code
              try:
                  if 'body' in event and isinstance(event['body'], str):
                      event_body = json.loads(event['body'])
                      user_code = event_body.get('code', '')
                  else:
                      user_code = event.get('code', '')
              except json.JSONDecodeError:
                  logger.error("Error decoding JSON from event body")
                  return {
                      'statusCode': 400,
                      'body': json.dumps({'error': 'Bad request'})
                  }

              # Basic input sanitization
              safe_code = sanitize_code(user_code)

              # Execute the sanitized user code and capture output
              execution_output, error_output = execute_user_code(safe_code)

              # Log the execution details and output
              logger.info(f"Executed code: {safe_code}")
              logger.info(f"Execution output: {execution_output}")
              if error_output:
                  logger.error(f"Execution error: {error_output}")

              # Prepare the response
              response = {
                  'statusCode': 200,
                  'body': json.dumps({
                      'output': execution_output if execution_output else error_output
                  })
              }

              return response

          def sanitize_code(code):
              # Basic sanitization to remove potentially harmful code
              banned_keywords = ['import', 'exec', 'eval', '__', 'open', 'subprocess', 'input', 'os', 'sys']
              for keyword in banned_keywords:
                  code = code.replace(keyword, '')
              return code

          def execute_user_code(code):
              # Set up an environment to execute the user code safely
              original_stdout = sys.stdout
              sys.stdout = StringIO()

              execution_output, error_output = '', ''

              try:
                  # Execute the user's code
                  exec(code)
                  execution_output = sys.stdout.getvalue()
              except Exception as e:
                  # Capture any execution errors
                  error_output = str(e)
              finally:
                  # Restore original stdout
                  sys.stdout = original_stdout

              return execution_output, error_output

          import logging
          from io import StringIO
          import sys

          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              # Log the entire event to inspect its structure
              logger.info(f"Received event: {event}")

              # Parse the event body to extract user code
              try:
                  if 'body' in event and isinstance(event['body'], str):
                      event_body = json.loads(event['body'])
                      user_code = event_body.get('code', '')
                  else:
                      user_code = event.get('code', '')
              except json.JSONDecodeError:
                  logger.error("Error decoding JSON from event body")
                  return {
                      'statusCode': 400,
                      'body': json.dumps({'error': 'Bad request'})
                  }

              # Basic input sanitization
              safe_code = sanitize_code(user_code)

              # Execute the sanitized user code and capture output
              execution_output, error_output = execute_user_code(safe_code)

              # Log the execution details and output
              logger.info(f"Executed code: {safe_code}")
              logger.info(f"Execution output: {execution_output}")
              if error_output:
                  logger.error(f"Execution error: {error_output}")

              # Prepare the response
              response = {
                  'statusCode': 200,
                  'body': json.dumps({
                      'output': execution_output if execution_output else error_output
                  })
              }

              return response

          def sanitize_code(code):
              # Basic sanitization to remove potentially harmful code
              banned_keywords = ['import', 'exec', 'eval', '__', 'open', 'subprocess', 'input', 'os', 'sys']
              for keyword in banned_keywords:
                  code = code.replace(keyword, '')
              return code

          def execute_user_code(code):
              # Set up an environment to execute the user code safely
              original_stdout = sys.stdout
              sys.stdout = StringIO()

              execution_output, error_output = '', ''

              try:
                  # Predefined logic to print prime numbers (1 to 100)
                  exec(predefined_prime_logic() + "\n" + code)
                  execution_output = sys.stdout.getvalue()
              except Exception as e:
                  error_output = str(e)
              finally:
                  sys.stdout = original_stdout

              return execution_output, error_output

          def predefined_prime_logic():
              return """
          for num in range(1, 101):
              if num > 1:
                  for i in range(2, int(num**0.5) + 1):
                      if (num % i) == 0:
                          break
                  else:
                      print(num)
          """

      MemorySize: 128
      Timeout: 183
      TracingConfig:
        Mode: "PassThrough"
      EphemeralStorage:
        Size: 512

  PrimeNumbersURL:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: "NONE" # Required
      Cors:
        AllowCredentials: false
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        AllowOrigins:
          - "*"
        ExposeHeaders:
          - "*"
      InvokeMode: "BUFFERED"
      TargetFunctionArn: !GetAtt PrimeNumbersFunction.Arn
 

  FactorialFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt CodingRole.Arn
      Runtime: "python3.12"
      FunctionName: FactorialFunction
      Code:
        ZipFile: |
          import json
          import logging
          from io import StringIO
          import sys

          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              # Log the entire event to inspect its structure
              logger.info(f"Received event: {event}")

              # Parse the event body to extract user code
              try:
                  if 'body' in event and isinstance(event['body'], str):
                      event_body = json.loads(event['body'])
                      user_code = event_body.get('code', '')
                  else:
                      user_code = event.get('code', '')
              except json.JSONDecodeError:
                  logger.error("Error decoding JSON from event body")
                  return {
                      'statusCode': 400,
                      'body': json.dumps({'error': 'Bad request'})
                  }

              # Basic input sanitization
              safe_code = sanitize_code(user_code)

              # Execute the sanitized user code and capture output
              execution_output, error_output = execute_user_code(safe_code)

              # Log the execution details and output
              logger.info(f"Executed code: {safe_code}")
              logger.info(f"Execution output: {execution_output}")
              if error_output:
                  logger.error(f"Execution error: {error_output}")

              # Prepare the response
              response = {
                  'statusCode': 200,
                  'body': json.dumps({
                      'output': execution_output if execution_output else error_output
                  })
              }

              return response

          def sanitize_code(code):
              # Basic sanitization to remove potentially harmful code
              banned_keywords = ['import', 'exec', 'eval', '__', 'open', 'subprocess', 'input', 'os', 'sys']
              for keyword in banned_keywords:
                  code = code.replace(keyword, '')
              return code

          def execute_user_code(code):
              # Set up an environment to execute the user code safely
              original_stdout = sys.stdout
              sys.stdout = StringIO()

              execution_output, error_output = '', ''

              try:
                  # Execute the user's code
                  exec(code)
                  # Capture the execution output
                  execution_output = sys.stdout.getvalue()
              except Exception as e:
                  # Capture any execution errors
                  error_output = str(e)
              finally:
                  # Restore original stdout
                  sys.stdout = original_stdout

              return execution_output, error_output

          import json
          def lambda_handler(event, context):
              # Extract the number from the event. Default to 5 if not provided.
              number = event.get('number', 5)

              # Calculate the factorial of the number
              factorial_result = calculate_factorial(number)

              # Prepare the response
              response = {
                  'statusCode': 200,
                  'body': json.dumps({
                      'output': f'The factorial of {number} is {factorial_result}'
                  })
              }

              return response

          def calculate_factorial(n):
              # Base case: 1! = 1
              if n == 1 or n == 0:
                  return 1
              # Recursive case: n! = n * (n-1)!
              else:
                  return n * calculate_factorial(n-1)

          
      MemorySize: 128
      Timeout: 183
      TracingConfig:
        Mode: "PassThrough"
      EphemeralStorage:
        Size: 512


  FactorialURL:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: "NONE" # Required
      Cors:
        AllowCredentials: false
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        AllowOrigins:
          - "*"
        ExposeHeaders:
          - "*"
      InvokeMode: "BUFFERED"
      TargetFunctionArn: !GetAtt FactorialFunction.Arn



  

